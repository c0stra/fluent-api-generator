{% set config = method.declaringClass %}
{% set className = concat(config.simpleName, "Builder") %}
package {{ config.packageName }};

import javax.annotation.Generated;

@Generated("Generated code using {{ templatePath }}")
public final class {{ className }} extends {{ config.simpleName }} {

{% for constructor in config.constructors %}
{% set parameters = constructor.parameters %}
    public {{ className }}({% if not empty(parameters) %}{% for t in parameters %}{% if loop.first %}{% else %}, {% endif %}{{ t.type }} {{t}}{% endfor %}{% endif %}) {
        super({{ join(parameters, ", ") }});
    }
{% endfor %}

{% for field in config.fields %}{% if not (field.final) %}
    public {{ className }} {{ field }}({{ field.type }} value) {
        this.{{ field }} = value;
        return this;
    }
{% endif %}{% endfor %}
{% for method in config.declaredMethods %}{% if not (method.static) %}
    public {{ className }} {{ method }}({{ method.parameters[0].type }} value) {
        super.{{ method }}(value);
        return this;
    }
{% endif %}{% endfor %}
{% for constructor in config.constructors %}
{% for parameter in constructor.parameters %}
    @FunctionalInterface
    public interface {{ capitalize(parameter) }}<T> {
        T {{ parameter }}({{ parameter.type }} {{ parameter }});
    }
{% endfor %}
{% endfor %}

}
