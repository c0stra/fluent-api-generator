{% set productType = defined(var) ? var.type : type %}
{% set detectedPackage = defined(var) ? var.packageName : type.packageName %}
{% set annotations = defined(var) ? var.annotations : type.annotations %}
{% set hasApi = (annotations.containsKey("FluentBuilderApi")) %}
{% set annotation = hasApi ? annotations.FluentBuilderApi : annotations.FluentBuilder %}
{% set classSuffix = concat(capitalize(annotation.methodName), "er").replaceFirst("teer", "tor").replaceFirst("eer", "er") %}
{% set apiName = (annotation.className == "") ? concat(productType.simpleName, classSuffix) : annotation.className %}
{% set className = (className == "") ? (hasApi ? concat(apiName, "Impl") : apiName) : className %}
{% set apiPackageName = (annotation.packageName == "") ? detectedPackage : annotation.packageName %}
{% set packageName = hasApi ? ((packageName == "") ? concat(apiPackageName, ".impl") : packageName) : apiPackageName %}
{% set classParameters = empty(productType.parameterVariables) ? "" : concat("<", join(productType.parameterVariables, ", "), ">") %}
package {{ packageName }};
import javax.annotation.Generated;

@Generated("Generated code using {{ templatePath }}")
public final class {{ className }}{% if not empty(productType.parameterVariables) %}<{%
 for t in productType.parameterVariables %}{% if loop.first %}{% else %}, {% endif %}{{ t.declaration }}{%
 endfor %}>{% endif %}{% if hasApi %} implements {{ apiPackageName }}.{{ apiName }}{{ classParameters }}{% endif %} {

    private final {{ productType }} object;

    public {{ className }}({{ productType }} object) {
        this.object = object;
    }
{% if productType.hasDefaultConstructor %}
    public {{ className }}() {
        this(new {{ productType }}());
    }
{% endif %}{% for setter in productType.methods %}{% if setter.name.matches(annotation.setterPattern) and setter.parameters.size == 1 %}
    {% if hasApi %}@Override
    {% endif %}public {{ className }}{{ classParameters }} {{ setter.toProperty(annotation.setterPattern, annotation.setterNameGroup) }}({{ setter.parameters[0].type }} value) {
        object.{{ setter.name }}(value);
        return this;
    }
{% endif %}{% endfor %}
    {% if hasApi %}@Override
    {% endif %}public {{ productType }} {{ methodName }}() {
        return object;
    }
{% if factoryMethod != "" %}
    public static {% if not empty(productType.parameterVariables) %}<{% for t in productType.parameterVariables %}{% if loop.first %}{% else %}, {% endif %}{{ t.declaration }}{% endfor %}>{% endif %} {{ className }}{{ classParameters }} {{ factoryMethod }}({{ productType }} object) {
        return new {{ className }}{% if not empty(productType.parameterVariables) %}<>{% endif %}(object);
    }
{% if productType.hasDefaultConstructor %}
    public static {% if not empty(productType.parameterVariables) %}<{% for t in productType.parameterVariables %}{% if loop.first %}{% else %}, {% endif %}{{ t.declaration }}{% endfor %}>{% endif %} {{ className }}{{ classParameters }} {{ factoryMethod }}() {
        return new {{ className }}{% if not empty(productType.parameterVariables) %}<>{% endif %}();
    }

    public static class Factory {
{% for setter in productType.methods %}{% if setter.name.matches(annotation.setterPattern) and setter.parameters.size == 1 %}
        public {{ classParameters }} {{ className }}{{ classParameters }} {{ setter.toProperty(annotation.setterPattern, annotation.setterNameGroup) }}({{ setter.parameters[0].type }} value) {
            return {{ className }}.{{ classParameters }}{{ factoryMethod }}().{{ setter.toProperty(annotation.setterPattern, annotation.setterNameGroup) }}(value);
        }
{% endif %}{% endfor %}
    }
{% endif %}{% endif %}
}
